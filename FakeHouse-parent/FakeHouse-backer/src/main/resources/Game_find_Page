 PageHelper.startPage(queryPageBean.getCurrentPage(), queryPageBean.getPageSize());
        // 封装查询条件, 到mapper中进行sql组装
        // 如果在mapper中无法进行拼装, 就在此处进行处理
        Map<String, Object> map = new HashMap<>();

        // 查询值
        String queryString = queryPageBean.getQueryString();

        // 排序字段, 需要进行处理, 如果不是downloadCount或者watchCount的话可以进行添加
        String orderColumn = queryPageBean.getOrderColumn();

        // 查询字段
        String queryColumn = queryPageBean.getQueryColumn();

        //  排序方式
        String orderType = queryPageBean.getOrderType();
        boolean orderDescFlag = false;
        if (!StringUtils.isEmpty(orderType) && "desc".equalsIgnoreCase(orderType)){
            orderDescFlag = true;
        }

        // 分类查询值
        String categoryName = queryPageBean.getCategoryName();
        if (!StringUtils.isEmpty(categoryName)){
            // 通过分类查询
            map.put("categoryName", categoryName);

            if (!StringUtils.isEmpty(queryString) && !StringUtils.isEmpty(queryColumn)){
                map.put("queryString", "%"+queryString+"%");  // 名字
                switch(queryColumn){
                    case "name":
                        // 通过名字查询
                       if("uploadTime".equals(orderColumn)){
                           if (orderDescFlag){
                               gameMapper.findPageByCategoryAndNameOrderByUploadTime(map);
                           }else{

                           }

                        }else if ("size".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndNameOrderBySize(map);
                        }else{
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndNameOrderByInsertTime(map);
                        }
                        break;
                    case "decoder":
                        // 通过破解者进行查询
                        if("uploadTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndDecoderOrderByUploadTime(map);
                        }else if ("size".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndDecoderOrderBySize(map);
                        }else{
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndDecoderOrderByInsertTime(map);
                        }
                        break;
                    case "development":
                        // 通过开发商进行查询
                        if("uploadTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndDevelopmentOrderByUploadTime(map);
                        }else if ("size".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndDevelopmentOrderBySize(map);
                        }else{
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndDevelopmentOrderByInsertTime(map);
                        }
                        break;
                    case "deliver":
                        // 通过开发商进行查询
                        if("uploadTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndDeliverOrderByUploadTime(map);
                        }else if ("size".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndDeliverOrderBySize(map);
                        }else{
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndDeliverOrderByInsertTime(map);
                        }
                        break;
                    case "platform":
                        // 通过平台进行查询
                       if("uploadTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndPlatformOrderByUploadTime(map);
                        }else if ("size".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndPlatformOrderBySize(map);
                        }else{
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndPlatformOrderByInsertTime(map);
                        }
                        break;
                    case "backgroundLanguage":
                        // 通过文字语言进行查询
                       if("uploadTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndBackgroundLanguageOrderByUploadTime(map);
                        }else if ("size".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndBackgroundLanguageOrderBySize(map);
                        }else{
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndBackgroundLanguageOrderByInsertTime(map);
                        }
                        break;
                    case "voiceLanguage":
                        // 通过语音语言进行查询
                       if("uploadTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndVoiceLanguageOrderByUploadTime(map);
                        }else if ("size".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndVoiceLanguageOrderBySize(map);
                        }else{
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndVoiceLanguageOrderByInsertTime(map);
                        }
                        break;
                    default:
                        // 通过名字查询
                        if("uploadTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndNameOrderByUploadTime(map);
                        }else if ("size".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndNameOrderBySize(map);
                        }else{
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByCategoryAndNameOrderByInsertTime(map);
                        }
                        break;
                }
            }else{
                // 不需要通过字段进行查询, 即通过分类查询所有
                // 需要知道排序字段
               if("uploadTime".equals(orderColumn)){
                    gameMapper.findPageByCategoryOrderByUploadTime(map);
                }else if ("size".equals(orderColumn)){
                    gameMapper.findPageByCategoryOrderBySize(map);
                }else{
//                   else if("insertTime".equals(orderColumn)){
                    gameMapper.findPageByCategoryOrderByInsertTime(map);
                }
            }
        }else{
            // 不通过分类查询
            if (!StringUtils.isEmpty(queryString)) {
                // 名字
                map.put("queryString", "%" + queryString + "%");
                // 查询字段
                String queryColumn = queryPageBean.getQueryColumn();
                switch (queryColumn) {
                    case "name":
                        // 通过名字查询
                        if ("uploadTime".equals(orderColumn)) {
                            gameMapper.findPageByNameOrderByUploadTime(map);
                        } else if ("size".equals(orderColumn)) {
                            gameMapper.findPageByNameOrderBySize(map);
                        } else {
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByNameOrderByInsertTime(map);
                        }
                        break;
                    case "decoder":
                        // 通过破解者进行查询
                        if ("uploadTime".equals(orderColumn)) {
                            gameMapper.findPageByDecoderOrderByUploadTime(map);
                        } else if ("size".equals(orderColumn)) {
                            gameMapper.findPageByDecoderOrderBySize(map);
                        } else {
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByDecoderOrderByInsertTime(map);
                        }
                        break;
                    case "development":
                        // 通过开发商进行查询
                        if ("uploadTime".equals(orderColumn)) {
                            gameMapper.findPageByDevelopmentOrderByUploadTime(map);
                        } else if ("size".equals(orderColumn)) {
                            gameMapper.findPageByDevelopmentOrderBySize(map);
                        } else {
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByDevelopmentOrderByInsertTime(map);
                        }
                        break;
                    case "deliver":
                        // 通过开发商进行查询
                        if ("uploadTime".equals(orderColumn)) {
                            gameMapper.findPageByDeliverOrderByUploadTime(map);
                        } else if ("size".equals(orderColumn)) {
                            gameMapper.findPageByDeliverOrderBySize(map);
                        } else {
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByDeliverOrderByInsertTime(map);
                        }
                        break;
                    case "platform":
                        // 通过平台进行查询
                        if ("uploadTime".equals(orderColumn)) {
                            gameMapper.findPageByPlatformOrderByUploadTime(map);
                        } else if ("size".equals(orderColumn)) {
                            gameMapper.findPageByPlatformOrderBySize(map);
                        } else {
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByPlatformOrderByInsertTime(map);
                        }
                        break;
                    case "backgroundLanguage":
                        // 通过文字语言进行查询
                        if ("size".equals(orderColumn)) {
                            gameMapper.findPageByBackgroundLanguageOrderBySize(map);
                        } else {
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByBackgroundLanguageOrderByInsertTime(map);
                        }
                        break;
                    case "voiceLanguage":
                        // 通过语音语言进行查询
                        if ("uploadTime".equals(orderColumn)) {
                            gameMapper.findPageByVoiceLanguageOrderByUploadTime(map);
                        } else if ("size".equals(orderColumn)) {
                            gameMapper.findPageByVoiceLanguageOrderBySize(map);
                        } else {
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByVoiceLanguageOrderByInsertTime(map);
                        }
                        break;
                    default:
                        // 通过名字查询
                        if ("uploadTime".equals(orderColumn)) {
                            gameMapper.findPageByNameOrderByUploadTime(map);
                        } else if ("size".equals(orderColumn)) {
                            gameMapper.findPageByNameOrderBySize(map);
                        } else {
//                        else if("insertTime".equals(orderColumn)){
                            gameMapper.findPageByNameOrderByInsertTime(map);
                        }
                        break;
                }
            }else{
                // 不需要通过字段进行查询, 即通过分类查询所有
                // 需要知道排序字段
                if("uploadTime".equals(orderColumn)){
                    gameMapper.findPageOrderByUploadTime(map);
                }else if ("size".equals(orderColumn)){
                    gameMapper.findPageOrderBySize(map);
                }else{
//                   else if("insertTime".equals(orderColumn)){
                    gameMapper.findPageOrderByInsertTime(map);
                }
            }
        }



        Page<Game> result = gameMapper.findPageForManage(map);
        if (result != null){
            // 查询出下载数和查看数
            fillGameWithCount(result);
            // 对特殊排序字段进行处理  进行特色方式的排序
            List<Game> gameList = result.getResult();
            return new PageResult(result.getTotal(), gameList);
        }

        // 没有查询到数据, 返回空
        return null;